-- Script de Validation Finale du Syst√®me
-- Ce script v√©rifie que tous les probl√®mes critiques ont √©t√© r√©solus

-- 1. V√©rification de la sant√© du syst√®me
SELECT '=== V√âRIFICATION DE LA SANT√â DU SYST√àME ===' as section;

SELECT * FROM public.system_health_check();

-- 2. V√©rification de l'int√©grit√© des donn√©es
SELECT '' as separator;
SELECT '=== V√âRIFICATION DE L'INT√âGRIT√â DES DONN√âES ===' as section;

SELECT * FROM public.verify_data_integrity();

-- 3. V√©rification des tables cr√©√©es
SELECT '' as separator;
SELECT '=== V√âRIFICATION DES TABLES CR√â√âES ===' as section;

SELECT
    table_name,
    CASE WHEN table_type = 'BASE TABLE' THEN '‚úÖ TABLE' ELSE 'üìã VUE' END as type,
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_policies
        WHERE schemaname = 'public' AND tablename = table_name
    ) THEN 'üîí RLS' ELSE 'üîì OUVERT' END as security
FROM information_schema.tables
WHERE table_schema = 'public'
ORDER BY table_type, table_name;

-- 4. V√©rification des fonctions disponibles
SELECT '' as separator;
SELECT '=== V√âRIFICATION DES FONCTIONS DISPONIBLES ===' as section;

SELECT
    routine_name,
    CASE WHEN routine_type = 'FUNCTION' THEN 'üîß FONCTION' ELSE '‚öôÔ∏è PROC√âDURE' END as type,
    CASE WHEN external_language IS NULL THEN 'üìÑ SQL' ELSE 'üêç PL/' || external_language END as language
FROM information_schema.routines
WHERE routine_schema = 'public'
ORDER BY routine_name;

-- 5. V√©rification des utilisateurs de test
SELECT '' as separator;
SELECT '=== V√âRIFICATION DES UTILISATEURS DE TEST ===' as section;

SELECT
    role,
    COUNT(*) as total_utilisateurs,
    COUNT(CASE WHEN status = 'active' THEN 1 END) as actifs,
    COUNT(CASE WHEN email LIKE '%@example.com' THEN 1 END) as test_accounts
FROM public.users
GROUP BY role
ORDER BY role;

-- 6. V√©rification des profils marchands
SELECT '' as separator;
SELECT '=== V√âRIFICATION DES PROFILS MARCHANDS ===' as section;

SELECT
    u.email,
    u.name,
    mp.business_name,
    mp.business_type,
    mp.is_verified,
    mp.languages
FROM public.users u
JOIN public.merchant_profiles mp ON u.id = mp.user_id
WHERE u.role = 'merchant'
ORDER BY u.email;

-- 7. V√©rification des coop√©ratives
SELECT '' as separator;
SELECT '=== V√âRIFICATION DES COOP√âRATIVES ===' as section;

SELECT
    c.name,
    c.type,
    c.registration_number,
    COUNT(cm.user_id) as membres_count,
    c.status
FROM public.cooperatives c
LEFT JOIN public.cooperative_members cm ON c.id = cm.cooperative_id
GROUP BY c.id, c.name, c.type, c.registration_number, c.status
ORDER BY c.name;

-- 8. V√©rification des producteurs
SELECT '' as separator;
SELECT '=== V√âRIFICATION DES PRODUCTEURS ===' as section;

SELECT
    u.email,
    u.name,
    pp.farm_name,
    pp.farm_size,
    pp.certification_type
FROM public.users u
JOIN public.producer_profiles pp ON u.id = pp.user_id
WHERE u.role = 'producer'
ORDER BY u.email;

-- 9. V√©rification des relations marchands-coop√©ratives
SELECT '' as separator;
SELECT '=== V√âRIFICATION DES RELATIONS MARCHANDS-COOP√âRATIVES ===' as section;

SELECT
    u.email as marchand_email,
    c.name as cooperative_name,
    r.relation_type,
    r.status,
    r.credit_limit,
    r.discount_rate,
    r.payment_terms
FROM public.merchant_cooperative_relations r
JOIN public.merchant_profiles mp ON r.merchant_id = mp.id
JOIN public.users u ON mp.user_id = u.id
JOIN public.cooperatives c ON r.cooperative_id = c.id
ORDER BY u.email, c.name;

-- 10. V√©rification des produits
SELECT '' as separator;
SELECT '=== V√âRIFICATION DES PRODUITS ===' as section;

SELECT
    p.name,
    p.category,
    p.unit,
    p.unit_price,
    p.stock_quantity,
    p.is_active,
    CASE
        WHEN p.producer_id IS NOT NULL THEN 'üåæ Producteur'
        WHEN p.cooperative_id IS NOT NULL THEN 'üè¢ Coop√©rative'
        WHEN p.merchant_id IS NOT NULL THEN 'üè™ Marchand'
        ELSE '‚ùì Inconnu'
    END as owner_type
FROM public.products p
ORDER BY p.category, p.name
LIMIT 20;

-- 11. V√©rification des commandes d'approvisionnement
SELECT '' as separator;
SELECT '=== V√âRIFICATION DES COMMANDES D''APPROVISIONNEMENT ===' as section;

SELECT
    so.order_number,
    buyer.email as acheteur,
    seller.email as vendeur,
    so.status,
    so.payment_status,
    so.total_amount,
    so.final_amount,
    so.is_recurring,
    so.recurring_frequency
FROM public.supply_orders so
JOIN public.users buyer ON so.buyer_id = buyer.id
JOIN public.users seller ON so.seller_id = seller.id
ORDER BY so.created_at DESC;

-- 12. V√©rification des r√©coltes (nouvelle table)
SELECT '' as separator;
SELECT '=== V√âRIFICATION DES R√âCOLTES ===' as section;

SELECT
    u.email as producteur,
    p.name as produit,
    ph.harvest_date,
    ph.quantity,
    ph.unit,
    ph.quality_grade
FROM public.producer_harvests ph
JOIN public.producer_profiles pp ON ph.producer_id = pp.id
JOIN public.users u ON pp.user_id = u.id
JOIN public.products p ON ph.product_id = p.id
ORDER BY ph.harvest_date DESC;

-- 13. V√©rification des ventes producteurs (nouvelle table)
SELECT '' as separator;
SELECT '=== V√âRIFICATION DES VENTES PRODUCTEURS ===' as section;

SELECT
    u.email as producteur,
    p.name as produit,
    ps.quantity,
    ps.unit_price,
    ps.total_price,
    ps.sale_date,
    ps.quality_grade
FROM public.producer_sales ps
JOIN public.producer_profiles pp ON ps.producer_id = pp.id
JOIN public.users u ON pp.user_id = u.id
JOIN public.products p ON ps.product_id = p.id
ORDER BY ps.sale_date DESC;

-- 14. V√©rification des contraintes
SELECT '' as separator;
SELECT '=== V√âRIFICATION DES CONTRAINTES ===' as section;

SELECT
    tc.table_name,
    tc.constraint_name,
    tc.constraint_type,
    CASE WHEN tc.is_deferrable = 'YES' THEN 'OUI' ELSE 'NON' END as deferrable
FROM information_schema.table_constraints tc
WHERE tc.table_schema = 'public'
ORDER BY tc.table_name, tc.constraint_name;

-- 15. V√©rification des index
SELECT '' as separator;
SELECT '=== V√âRIFICATION DES INDEX ===' as section;

SELECT
    schemaname,
    tablename,
    indexname,
    indexdef
FROM pg_indexes
WHERE schemaname = 'public'
ORDER BY tablename, indexname;

-- 16. Test des fonctions critiques
SELECT '' as separator;
SELECT '=== TEST DES FONCTIONS CRITIQUES ===' as section;

-- Test de g√©n√©ration de num√©ro de commande
SELECT
    'generate_order_number' as fonction,
    CASE WHEN public.generate_order_number() LIKE 'ORD-________-____' THEN '‚úÖ SUCC√àS' ELSE '‚ùå √âCHEC' END as resultat;

-- Test de g√©n√©ration de num√©ro de commande d'approvisionnement
SELECT
    'generate_supply_order_number' as fonction,
    CASE WHEN public.generate_supply_order_number() LIKE 'SUP-________-____' THEN '‚úÖ SUCC√àS' ELSE '‚ùå √âCHEC' END as resultat;

-- Test de la fonction de v√©rification de donn√©es
SELECT
    'verify_data_integrity' as fonction,
    CASE WHEN (SELECT COUNT(*) FROM public.verify_data_integrity() WHERE status = 'FAILED') = 0
          THEN '‚úÖ SUCC√àS'
          ELSE '‚ùå ' || (SELECT COUNT(*) FROM public.verify_data_integrity() WHERE status = 'FAILED') || ' probl√®mes' END as resultat;

-- Test de la fonction de sant√© du syst√®me
SELECT
    'system_health_check' as fonction,
    CASE WHEN (SELECT COUNT(*) FROM public.system_health_check() WHERE status = 'ERROR') = 0
          THEN '‚úÖ SUCC√àS'
          ELSE '‚ùå Erreurs d√©tect√©es' END as resultat;

-- 17. R√©sum√© final
SELECT '' as separator;
SELECT '=== R√âSUM√â FINAL ===' as section;

SELECT
    'Statut Global' as metrique,
    CASE
        WHEN (SELECT COUNT(*) FROM public.verify_data_integrity() WHERE status = 'FAILED') = 0
        AND (SELECT COUNT(*) FROM public.system_health_check() WHERE status = 'ERROR') = 0
        THEN '‚úÖ SYST√àME PR√äT'
        ELSE '‚ùå PROBL√àMES D√âTECT√âS'
    END as valeur
UNION ALL
SELECT
    'Utilisateurs de test' as metrique,
    (SELECT COUNT(*) FROM public.users WHERE email LIKE '%@example.com')::TEXT || ' comptes' as valeur
UNION ALL
SELECT
    'Relations marchands-coop√©ratives' as metrique,
    (SELECT COUNT(*) FROM public.merchant_cooperative_relations)::TEXT || ' relations' as valeur
UNION ALL
SELECT
    'Commandes d''approvisionnement' as metrique,
    (SELECT COUNT(*) FROM public.supply_orders)::TEXT || ' commandes' as valeur
UNION ALL
SELECT
    'R√©coltes enregistr√©es' as metrique,
    (SELECT COUNT(*) FROM public.producer_harvests)::TEXT || ' r√©coltes' as valeur
UNION ALL
SELECT
    'Ventes producteurs' as metrique,
    (SELECT COUNT(*) FROM public.producer_sales)::TEXT || ' ventes' as valeur
UNION ALL
SELECT
    'Produits actifs' as metrique,
    (SELECT COUNT(*) FROM public.products WHERE is_active = true)::TEXT || ' produits' as valeur;

-- 18. Instructions finales
SELECT '' as separator;
SELECT '=== INSTRUCTIONS FINALES ===' as section;
SELECT 'Si tous les tests sont en SUCC√àS, le syst√®me est pr√™t pour les tests d''int√©gration.' as instructions;
SELECT 'Sinon, consultez les erreurs ci-dessus et corrigez-les avant de proc√©der.' as avertissement;
SELECT '' as separator;